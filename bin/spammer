#!/usr/bin/env jruby
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'rubygems'
require 'bundler'
require 'amqp'

Bundler.setup

require 'json'

class Handler
  
  def self.ctx
    conf = {
      :host => "127.0.0.1",
      :user => "guest",
      :password => "guest",
      :vhost => "/",
      :logging => false,
      :port => 5672
    }
    connection = AMQP.connect(conf)
    @ctx ||= AMQP::Channel.new(connection)
  end
  
  def self.exchangeout
    @exchangeout ||= ctx.topic('esper-out')
  end

  def self.exchangein
    @exchangein ||= ctx.topic('esper-in')
  end

  def initialize
    @received = 0
  end
  
  def on_readable(socket, messages)
    @received += 1
    msg = messages.map &:copy_out_string
    #events = JSON.parse(msg)
    puts "\n----------------\n Received: #{msg.inspect}\n-----------------\n\n\n\n\n\n"
  end    
  
end


    def handle_message(metadata, payload)
      event = JSON.parse(payload)
      puts "[##{@received}]: #{event.inspect}"
    end # handle_message(metadata, payload)


EM.run {

  Handler.ctx.queue("", :exclusive => true, :auto_delete => true).bind(Handler.exchangeout).subscribe(&self.method(:handle_message))
  
  EventMachine::add_periodic_timer( 1 ) do 
    msg = { :message => "Salut, il est #{Time.now}", :code => rand(20), :type => "TestEvent", :user => { :firstName => "Bob", :lastName => "Bobby" } }.to_json
    puts "Sending: #{msg}"
    Handler.exchangein.publish(msg)
  end
  
}

